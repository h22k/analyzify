package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"time"

	"github.com/google/uuid"
	"github.com/h22k/analyzify/graph/model"
	"github.com/h22k/analyzify/internal/dto"
)

var (
	EventCreateErr = errors.New("failed to create event")
	EventFetchErr  = errors.New("failed to fetch events")
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	event, err := r.EventService.CreateEvent(ctx, dto.CreateEventDTO{
		EventID:   uuid.New(),
		UserID:    input.UserID,
		EventType: input.EventType,
		Timestamp: time.Now(),
		Metadata:  input.Metadata,
	})

	if err != nil {
		return nil, errors.Join(err, EventCreateErr)
	}

	return event.ToGraphqlEventModel(), nil
}

// EventsByUserID is the resolver for the eventsByUserID field.
func (r *queryResolver) EventsByUserID(ctx context.Context, userID uuid.UUID) ([]*model.Event, error) {
	events, err := r.EventService.GetEventsByUserID(ctx, userID)

	if err != nil {
		return nil, errors.Join(err, EventFetchErr)
	}

	var result []*model.Event
	for _, e := range events {
		result = append(result, e.ToGraphqlEventModel())
	}

	return result, nil
}

// EventCountByEventType is the resolver for the eventCountByEventType field.
func (r *queryResolver) EventCountByEventType(ctx context.Context, eventType *string, from time.Time, to time.Time) ([]*model.EventCount, error) {
	eventCounts, err := r.EventService.GetEventCountByEventType(ctx, eventType, from, to)

	if err != nil {
		return nil, errors.Join(err, EventFetchErr)
	}

	var result []*model.EventCount
	for _, ec := range eventCounts {
		result = append(result, ec.ToGraphEventCountModel())
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
