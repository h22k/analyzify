package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/h22k/analyzify/graph/model"
	"github.com/h22k/analyzify/internal/dto"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	event, err := r.EventService.CreateEvent(ctx, dto.CreateEventDTO{
		EventID:   uuid.New(),
		UserID:    input.UserID,
		EventType: input.EventType,
		Timestamp: time.Now(),
		Metadata:  input.Metadata,
	})

	if err != nil {
		log.Printf("failed to create event: %v", err) // <- hatayÄ± logla
		return nil, fmt.Errorf("failed to create event: %w", err)
	}

	return &model.Event{
		EventID:   event.EventID,
		UserID:    event.UserID,
		EventType: event.EventType,
		Timestamp: event.Timestamp,
		Metadata:  event.Metadata,
	}, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, userID uuid.UUID) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, eventID uuid.UUID) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
